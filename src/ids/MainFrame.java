/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ids;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.PrintStream;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import jpcap.JpcapCaptor;
import jpcap.packet.Packet;

/**
 *
 * @author olu
 */
public class MainFrame extends javax.swing.JFrame {

    static boolean StartPacketWrite;
    static String MethodToRun;
    int[] IntInterfacesSelected;
    static boolean StopSniffing;
    static String External = "";
    static boolean ThreadFireSeparator;
    static PrintStream printStream;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {

        initComponents();
        StopSniffing = true;
        StartPacketWrite = false;

        SelectInterfaceButton.setEnabled(false);
        BeginSniffingButton.setEnabled(false);
        StopSniffingButton.setEnabled(false);
        SpoofDetectorActivator.setEnabled(false);
        ThreadFireSeparator = false;

        printStream = new PrintStream(new CustomOutputStream(TextArea));

        System.setOut(printStream);
        System.setErr(printStream);

        Image logo;
        try {
            logo = ImageIO.read(getClass().getResource("logo_email.jpg"));
            ImageIcon display = new ImageIcon(ScaledImage(logo, 130, 97));
            MailLabel.setIcon(display);
        } catch (Exception e) {
            IDS.msg.ErrorMessages("Mail Image Loading Error: " + e);
        }

    }

    private Image ScaledImage(Image img, int w, int h) {
        BufferedImage resizedImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(img, 0, 0, w, h, null);
        g2.dispose();
        return resizedImage;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        GetInterfacesButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        InterfacesList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        SelectAllBox = new javax.swing.JCheckBox();
        BeginSniffingButton = new javax.swing.JButton();
        StopSniffingButton = new javax.swing.JButton();
        SpoofDetectorActivator = new javax.swing.JCheckBox();
        SelectInterfaceButton = new javax.swing.JButton();
        InterfaceSelectorField = new javax.swing.JTextField();
        LoadFile = new javax.swing.JButton();
        SaveOnCaptureBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        MailLabel = new javax.swing.JLabel();
        AutoAlertCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        ViewPacketDetailsButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        SettingsOption = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        ActivateOption = new javax.swing.JMenu();
        AboutOption = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GENERIC ALGORITHM BASED INTRUSION DETECTION SYSTEM");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        TextArea.setEditable(false);
        TextArea.setBackground(new java.awt.Color(0, 0, 51));
        TextArea.setColumns(20);
        TextArea.setFont(new java.awt.Font("Monospac821 BT", 1, 11)); // NOI18N
        TextArea.setForeground(new java.awt.Color(255, 255, 255));
        TextArea.setLineWrap(true);
        TextArea.setRows(5);
        TextArea.setText("Welcome to the Generic Algorithm Based Intrusion Detection System.............\n\nClick on 'OPEN AVAILABLE NETWORK INTERFACES ON YOUR PC' to begin.\n\nThe system will only begin to learn about and analyze your network after you check the 'INITIATE IP SPOOF DETECTOR' box.\n\nEnjoy your use...:) ");
        TextArea.setWrapStyleWord(true);
        TextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(TextArea);

        GetInterfacesButton.setBackground(new java.awt.Color(0, 0, 51));
        GetInterfacesButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 12)); // NOI18N
        GetInterfacesButton.setForeground(new java.awt.Color(255, 255, 255));
        GetInterfacesButton.setText("OPEN AVAILABLE NETWORK INTERFACES ON YOUR PC");
        GetInterfacesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetInterfacesButtonActionPerformed(evt);
            }
        });

        InterfacesList.setFont(new java.awt.Font("Monospac821 BT", 1, 10)); // NOI18N
        InterfacesList.setForeground(new java.awt.Color(153, 0, 0));
        InterfacesList.setSelectionBackground(new java.awt.Color(0, 0, 51));
        InterfacesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                InterfacesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(InterfacesList);

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 51));
        jLabel1.setText("LIST OF ACTIVE INTERFACES");

        SelectAllBox.setBackground(new java.awt.Color(255, 255, 255));
        SelectAllBox.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 11)); // NOI18N
        SelectAllBox.setForeground(new java.awt.Color(0, 0, 51));
        SelectAllBox.setText("SELECT ALL INTERFACES");
        SelectAllBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SelectAllBoxItemStateChanged(evt);
            }
        });
        SelectAllBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAllBoxActionPerformed(evt);
            }
        });

        BeginSniffingButton.setBackground(new java.awt.Color(102, 0, 0));
        BeginSniffingButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 12)); // NOI18N
        BeginSniffingButton.setForeground(new java.awt.Color(255, 255, 255));
        BeginSniffingButton.setText("BEGIN SNIFFING");
        BeginSniffingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeginSniffingButtonActionPerformed(evt);
            }
        });

        StopSniffingButton.setBackground(new java.awt.Color(0, 0, 51));
        StopSniffingButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 12)); // NOI18N
        StopSniffingButton.setForeground(new java.awt.Color(255, 255, 255));
        StopSniffingButton.setText("STOP SNIFFING");
        StopSniffingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopSniffingButtonActionPerformed(evt);
            }
        });

        SpoofDetectorActivator.setBackground(new java.awt.Color(255, 255, 255));
        SpoofDetectorActivator.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 11)); // NOI18N
        SpoofDetectorActivator.setForeground(new java.awt.Color(0, 102, 0));
        SpoofDetectorActivator.setText("INITIATE IP SPOOF DETECTOR");
        SpoofDetectorActivator.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SpoofDetectorActivatorItemStateChanged(evt);
            }
        });

        SelectInterfaceButton.setBackground(new java.awt.Color(0, 0, 51));
        SelectInterfaceButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 12)); // NOI18N
        SelectInterfaceButton.setForeground(new java.awt.Color(255, 255, 255));
        SelectInterfaceButton.setText("CONFIRM INTERFACE SELECTION");
        SelectInterfaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectInterfaceButtonActionPerformed(evt);
            }
        });

        InterfaceSelectorField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        InterfaceSelectorField.setForeground(new java.awt.Color(0, 0, 51));
        InterfaceSelectorField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InterfaceSelectorFieldKeyTyped(evt);
            }
        });

        LoadFile.setBackground(new java.awt.Color(0, 0, 51));
        LoadFile.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 11)); // NOI18N
        LoadFile.setForeground(new java.awt.Color(255, 255, 255));
        LoadFile.setText("LOAD");
        LoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileActionPerformed(evt);
            }
        });

        SaveOnCaptureBox.setBackground(new java.awt.Color(255, 255, 255));
        SaveOnCaptureBox.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 11)); // NOI18N
        SaveOnCaptureBox.setForeground(new java.awt.Color(0, 0, 51));
        SaveOnCaptureBox.setText("ENABLE SAVE ON CAPTURE");
        SaveOnCaptureBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SaveOnCaptureBoxItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 51));
        jLabel2.setText("(Please select desired Interface)");

        jLayeredPane1.setBackground(new java.awt.Color(102, 0, 0));
        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 51)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 51)), "ADMIN ALERT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Berlin Sans FB Demi", 0, 11), new java.awt.Color(0, 0, 51))); // NOI18N
        jLayeredPane1.setForeground(new java.awt.Color(255, 255, 255));

        MailLabel.setText("MailLabel");
        MailLabel.setToolTipText("Click to Manually Send Mail");
        MailLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MailLabelMouseClicked(evt);
            }
        });

        AutoAlertCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        AutoAlertCheckBox.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 11)); // NOI18N
        AutoAlertCheckBox.setForeground(new java.awt.Color(0, 0, 51));
        AutoAlertCheckBox.setText("ACTIVATE ADMIN AUTO ALERT");
        AutoAlertCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                AutoAlertCheckBoxItemStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("Click icon to Manually Send Concern Message");

        jLayeredPane1.setLayer(MailLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(AutoAlertCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(MailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AutoAlertCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AutoAlertCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ViewPacketDetailsButton.setBackground(new java.awt.Color(255, 255, 255));
        ViewPacketDetailsButton.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 10)); // NOI18N
        ViewPacketDetailsButton.setForeground(new java.awt.Color(0, 0, 51));
        ViewPacketDetailsButton.setText("VIEW SAVED PACKET DETAILS");
        ViewPacketDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewPacketDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(GetInterfacesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel2))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(BeginSniffingButton)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(SaveOnCaptureBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(LoadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(StopSniffingButton)
                                            .addComponent(SelectInterfaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(37, 37, 37)
                                    .addComponent(SpoofDetectorActivator, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(SelectAllBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InterfaceSelectorField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ViewPacketDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(GetInterfacesButton)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SelectInterfaceButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BeginSniffingButton)
                                    .addComponent(StopSniffingButton))
                                .addGap(7, 7, 7)
                                .addComponent(SpoofDetectorActivator)
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SaveOnCaptureBox)
                                    .addComponent(LoadFile)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ViewPacketDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SelectAllBox, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InterfaceSelectorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLayeredPane1))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));
        jMenuBar1.setForeground(new java.awt.Color(0, 204, 51));

        jMenu1.setBackground(new java.awt.Color(255, 255, 255));
        jMenu1.setForeground(new java.awt.Color(0, 0, 51));
        jMenu1.setText("HOME");
        jMenu1.setFont(new java.awt.Font("High Tower Text", 1, 12)); // NOI18N

        SettingsOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SettingsOption.setBackground(new java.awt.Color(255, 255, 255));
        SettingsOption.setFont(new java.awt.Font("Cambria", 0, 15)); // NOI18N
        SettingsOption.setForeground(new java.awt.Color(0, 0, 51));
        SettingsOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagePackage/Settings.jpg"))); // NOI18N
        SettingsOption.setText("Settings");
        SettingsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsOptionActionPerformed(evt);
            }
        });
        jMenu1.add(SettingsOption);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItem4.setFont(new java.awt.Font("Cambria", 0, 15)); // NOI18N
        jMenuItem4.setForeground(new java.awt.Color(0, 0, 51));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagePackage/exitIcon.jpg"))); // NOI18N
        jMenuItem4.setText("Exit");
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        ActivateOption.setBackground(new java.awt.Color(255, 255, 255));
        ActivateOption.setForeground(new java.awt.Color(0, 0, 51));
        ActivateOption.setText("HELP");
        ActivateOption.setFont(new java.awt.Font("High Tower Text", 1, 12)); // NOI18N

        AboutOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        AboutOption.setBackground(new java.awt.Color(255, 255, 255));
        AboutOption.setFont(new java.awt.Font("Cambria", 0, 15)); // NOI18N
        AboutOption.setForeground(new java.awt.Color(0, 0, 51));
        AboutOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImagePackage/Manual.jpg"))); // NOI18N
        AboutOption.setText("User Manual");
        AboutOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutOptionActionPerformed(evt);
            }
        });
        ActivateOption.add(AboutOption);

        jMenuBar1.add(ActivateOption);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SettingsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsOptionActionPerformed
        SettingsFrame settings = new SettingsFrame();
        settings.setVisible(true);

    }//GEN-LAST:event_SettingsOptionActionPerformed

    private void GetInterfacesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetInterfacesButtonActionPerformed
        synchronized (IDS.control) {
            IDS.control.GetAvailableInterfaces();
        }
        StopSniffing = true;
        InterfacesList.setEnabled(true);
        SelectInterfaceButton.setEnabled(true);
        BeginSniffingButton.setEnabled(false);
        StopSniffingButton.setEnabled(false);
        SpoofDetectorActivator.setEnabled(false);
         Hex2Decimal conv = new Hex2Decimal();
    
    }//GEN-LAST:event_GetInterfacesButtonActionPerformed

    private void SelectInterfaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectInterfaceButtonActionPerformed

        Controllers control = new Controllers();
        String SelectedInterface = "";

        if (SelectAllBox.isSelected() == false) {
            if (InterfaceSelectorField.getText().equals("")) {
                synchronized (IDS.msg) {
                    IDS.msg.ErrorMessages("Please Select The Interface(s) You Wish to Monitor");
                    return;
                }
            }
        } else if ((InterfaceSelectorField.getText().endsWith(",")) || (InterfaceSelectorField.getText().startsWith(","))) {
            synchronized (IDS.msg) {
                IDS.msg.ErrorMessages("Please Input Your Interface Selection Appropriately. Interface Selection Cannot End or Begin With a Comma");
                return;
            }

        }

        SelectedInterface = InterfaceSelectorField.getText();
        int Checker = 0;
        for (int i = 0; i < SelectedInterface.length(); i++) {
            if (!SelectedInterface.substring(i, i + 1).equals(",")) {
                Checker = Checker + 1;
            } else {
                Checker = Checker - 1;
            }
            if (Checker > 1) {
                IDS.msg.ErrorMessages("You Cannot Have Two Commas Following Each Other");
                return;
            }
        }

        String[] InterfacesSelected = InterfaceSelectorField.getText().toString().split(",");
        IntInterfacesSelected = new int[InterfacesSelected.length];
        int count = 0;
        for (String j : InterfacesSelected) {
            int InterfaceNumCheck = Integer.parseInt(j);
            IntInterfacesSelected[count] = InterfaceNumCheck;

            if ((InterfaceNumCheck > IDS.TotalNumberOfInterfaces) || (InterfaceNumCheck == 0)) { //Lock could happen here...No Synch
                synchronized (IDS.msg) {
                    IDS.msg.ErrorMessages("(One of the ) Interface(s) selected Does Not Exist");
                    return;
                }
            }
            count = count + 1;
        }
        synchronized (IDS.msg) {
            IDS.msg.InformationMessages("You Have Successfully Slelected Interface(s): " + SelectedInterface);
        }
        if (SelectAllBox.isSelected()) {
            InterfaceSelectorField.setEnabled(false);
            InterfacesList.setEnabled(false);
        } else {
            InterfaceSelectorField.setEnabled(true);
            InterfacesList.setEnabled(true);
        }
        SelectAllBox.setEnabled(true);
        SelectInterfaceButton.setEnabled(true);
        BeginSniffingButton.setEnabled(true);
        StopSniffingButton.setEnabled(false);
        SpoofDetectorActivator.setEnabled(false);
    }//GEN-LAST:event_SelectInterfaceButtonActionPerformed

    private void SelectAllBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectAllBoxActionPerformed
        /*    if(SelectAllBox.isSelected()==true){
         //InterfaceSelectorField.setText("");
         }
         else if(SelectAllBox.isSelected()==false){
         InterfaceSelectorField.setText("enter interface number separated  by a comma");
         }*/
    }//GEN-LAST:event_SelectAllBoxActionPerformed

    private void InterfaceSelectorFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InterfaceSelectorFieldKeyTyped
        char c = evt.getKeyChar();
        if (!(c == KeyEvent.VK_COMMA) && (!(Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {

            getToolkit().beep();
            evt.consume();
        }

    }//GEN-LAST:event_InterfaceSelectorFieldKeyTyped

    private void BeginSniffingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeginSniffingButtonActionPerformed
//Initialize all the separate threads needed to handle the activities of each of the selected interface
        InterfaceThread IntThread = new InterfaceThread();
        StopSniffing = false;
        TextArea.setText("");

        for (int i = 0; i < IntInterfacesSelected.length; i++) {
            IDS.InterfaceToOpen = IntInterfacesSelected[i] - 1;
            MainFrame.ThreadFireSeparator = false;
            IntThread.Start(IDS.InterfaceToOpen);
            while (MainFrame.ThreadFireSeparator == false) {
                //keeps looping, to ensure that the preceeding thread has been fully fired
            }
        }

        GetInterfacesButton.setEnabled(false);

        InterfaceSelectorField.setEnabled(false);
        InterfacesList.setEnabled(false);

        SelectAllBox.setEnabled(false);

        SelectInterfaceButton.setEnabled(false);
        BeginSniffingButton.setEnabled(false);
        StopSniffingButton.setEnabled(true);
        SpoofDetectorActivator.setEnabled(true);

    }//GEN-LAST:event_BeginSniffingButtonActionPerformed

    private void StopSniffingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopSniffingButtonActionPerformed
        GetInterfacesButton.setEnabled(true);
        if (SelectAllBox.isSelected()) {
            InterfaceSelectorField.setEnabled(false);
            InterfacesList.setEnabled(false);
        } else {
            InterfaceSelectorField.setEnabled(true);
            InterfacesList.setEnabled(true);
        }
        SelectAllBox.setEnabled(true);

        SelectInterfaceButton.setEnabled(true);
        BeginSniffingButton.setEnabled(true);
        StopSniffingButton.setEnabled(false);
        SpoofDetectorActivator.setEnabled(false);

        StopSniffing = true;
    }//GEN-LAST:event_StopSniffingButtonActionPerformed

    private void InterfacesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_InterfacesListValueChanged
        //Get selected Interface
        if (!InterfacesList.isSelectionEmpty()) {
            int[] SelectionIndex = InterfacesList.getSelectedIndices();
            String InterfaceClicked = "";
            for (int i : SelectionIndex) {
                i = i + 1;
                //  System.out.println(String.valueOf(i)); 
                InterfaceClicked = InterfaceClicked + String.valueOf(i) + ",";

            }
            if (InterfaceClicked.endsWith(",")) {

                // InterfaceClicked.substring(InterfaceClicked.length()-1, InterfaceClicked.length());
                InterfaceSelectorField.setText(InterfaceClicked.substring(0, InterfaceClicked.length() - 1));
            }
        }
    }//GEN-LAST:event_InterfacesListValueChanged

    private void SelectAllBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SelectAllBoxItemStateChanged
        if (SelectAllBox.isSelected()) {
            String IntSelectedDisplay = "";
            int[] SelectionIndices = new int[IDS.TotalNumberOfInterfaces];
            for (int i = 1; i <= IDS.TotalNumberOfInterfaces; i++) {
                if (i != IDS.TotalNumberOfInterfaces) {
                    IntSelectedDisplay = IntSelectedDisplay + String.valueOf(i) + ",";
                    SelectionIndices[i - 1] = i - 1;
                } else {
                    IntSelectedDisplay = IntSelectedDisplay + String.valueOf(i);
                    SelectionIndices[i - 1] = i - 1;
                }
            }
            // System.out.println("To Display: "+IntSelectedDisplay);
            InterfaceSelectorField.setText(IntSelectedDisplay);
            InterfacesList.setSelectedIndices(SelectionIndices);
            InterfacesList.setEnabled(false);
            InterfaceSelectorField.setEnabled(false);
        } else {
            InterfaceSelectorField.setText("Choose Interfaces Separated by a Comma");
            InterfacesList.setSelectedIndex(0);
            InterfacesList.setEnabled(true);
            InterfaceSelectorField.setEnabled(true);
        }
    }//GEN-LAST:event_SelectAllBoxItemStateChanged

    private void SpoofDetectorActivatorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SpoofDetectorActivatorItemStateChanged
        if (SpoofDetectorActivator.isSelected()) {
            IDS.LearnAndDetect = true;
        } else {
            IDS.LearnAndDetect = false;
        }
    }//GEN-LAST:event_SpoofDetectorActivatorItemStateChanged

    private void LoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileActionPerformed
        if (IDS.TotalNumberOfInterfaces == 0) {
            synchronized (IDS.msg) {
                IDS.msg.ErrorMessages("Please First of All Load Interfaces");
                return;
            }
        }

        JpcapCaptor captor;
        String[] Choices = new String[IDS.TotalNumberOfInterfaces];
        for (int i = 0; i < IDS.TotalNumberOfInterfaces; i++) {
            synchronized (IDS.Interfaces) {
                Choices[i] = IDS.Interfaces[i].description;
            }
        }

        int responses = 999999; //just an arbritrary value which I guess number of classeses shouldnt be up to

        responses = JOptionPane.showOptionDialog(this, "Which Interface's Log File Would You Like To View?", "FILE SELECTOR", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, Choices, "Please Select");

        if (responses == 999999) {
            JOptionPane.showMessageDialog(this, "No Interface Selected ", "FEEDBACK", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        //int FileValue = responses+1;

        try {
            captor = JpcapCaptor.openFile("DumpFile" + responses + ".txt");
            synchronized (IDS.Interfaces) {
                synchronized (IDS.print) {
                    IDS.print.TextAreaAppend("--------------------Interface " + IDS.Interfaces[responses] + "Saved Data------------------\n\n");
                }
            }
            while (true) {
//read a packet from the opened file
                Packet packet = captor.getPacket();
//if some error occurred or EOF has reached, break the loop
                if (packet == null) {
                    break;
                }
//otherwise, print out the packet
                synchronized (IDS.print) {
                    IDS.print.TextAreaAppend(packet.toString() + "\n");
                }
            }
            captor.close();
        } catch (IOException ex) {
            synchronized (IDS.msg) {
                IDS.msg.ErrorMessages("Error While Trying to Load File. Please Make Sure File Exists: " + ex);
                return;
            }
        }
    }//GEN-LAST:event_LoadFileActionPerformed

    private void SaveOnCaptureBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SaveOnCaptureBoxItemStateChanged
        if (SaveOnCaptureBox.isSelected()) {
            IDS.SaveOnCapture = true;
        } else {
            IDS.SaveOnCapture = false;
        }
    }//GEN-LAST:event_SaveOnCaptureBoxItemStateChanged

    private void MailLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MailLabelMouseClicked
        SwingEmailSender mail = new SwingEmailSender();
        mail.setVisible(true);
    }//GEN-LAST:event_MailLabelMouseClicked

    private void AutoAlertCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AutoAlertCheckBoxItemStateChanged
        if (AutoAlertCheckBox.isSelected()) {
            IDS.AutoAdminAlert = true;
            QueryDB query = new QueryDB();
            //  String[] ElementNames = {"ADMIN_EMAIL", "TRIGGER_VALUE"};
            IDS.ToSave = query.ProbeXML(IDS.ElementNames);
        } else {
            IDS.AutoAdminAlert = false;
        }
    }//GEN-LAST:event_AutoAlertCheckBoxItemStateChanged

    private void ViewPacketDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewPacketDetailsButtonActionPerformed
        String[] Choices = {"NORMAL PACKET TABLE", "SPOOFED PACKET TABLE"};

        int responses = 999999; //just an arbritrary value which I guess number of classeses shouldnt be up to

        responses = JOptionPane.showOptionDialog(this, "Which Repository Would You Like To View?", "FILE SELECTOR", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, Choices, "Please Select");

        if (responses == 999999) {
            JOptionPane.showMessageDialog(this, "No Repository Selected ", "FEEDBACK", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (responses == 0) {
            IDS.TableToView = "TRAFFIC_TABLE";
            PacketDetailsFrame ViewPD = new PacketDetailsFrame();
            ViewPD.setVisible(true);
        } else if (responses == 1) {
            IDS.TableToView = "SPOOFED_TABLE";
            PacketDetailsFrame ViewPD = new PacketDetailsFrame();
            ViewPD.setVisible(true);
        }


    }//GEN-LAST:event_ViewPacketDetailsButtonActionPerformed

    private void AboutOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutOptionActionPerformed
        IDS.msg.InformationMessages("Only Available in Full Version");
    }//GEN-LAST:event_AboutOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutOption;
    private javax.swing.JMenu ActivateOption;
    private javax.swing.JCheckBox AutoAlertCheckBox;
    private javax.swing.JButton BeginSniffingButton;
    private javax.swing.JButton GetInterfacesButton;
    private javax.swing.JTextField InterfaceSelectorField;
    public static javax.swing.JList InterfacesList;
    private javax.swing.JButton LoadFile;
    private javax.swing.JLabel MailLabel;
    private javax.swing.JCheckBox SaveOnCaptureBox;
    private javax.swing.JCheckBox SelectAllBox;
    private javax.swing.JButton SelectInterfaceButton;
    private javax.swing.JMenuItem SettingsOption;
    private javax.swing.JCheckBox SpoofDetectorActivator;
    private javax.swing.JButton StopSniffingButton;
    public static volatile javax.swing.JTextArea TextArea;
    private javax.swing.JButton ViewPacketDetailsButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}

class SwingWorkerThread extends SwingWorker<String, String> {

    @Override
    protected String doInBackground() throws Exception {
        String Pub = "Default";

        /*       for (int i = 0; i < 10; i++) {
            Pub = String.valueOf(i);
           synchronized (Pub) {
               publish(Pub);
           }
       Thread.sleep(1000);
        }
         */
        return Pub;
    }

    @Override
    protected void process(List<String> chunks) {
        for (String number : chunks) {
            MainFrame.TextArea.append(number + "\n");
            System.out.println(number);
        }

    }

    @Override
    protected void done() {
        System.out.println("Done Here");
    }

}
